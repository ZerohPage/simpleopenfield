name: Deploy to GitHub Pages (Protected)

on:
  # Only trigger on workflow dispatch for protected deployments
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy (e.g., v0.1.2)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'github-pages'
        type: choice
        options:
          - github-pages

# Set permissions for the GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages-${{ github.event.inputs.environment }}"
  cancel-in-progress: false

jobs:
  # Validation job
  validate:
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.check.outputs.valid }}
      tag_exists: ${{ steps.check.outputs.tag_exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate tag and permissions
        id: check
        run: |
          echo "üîç Validating deployment request..."
          
          # Check if tag exists
          if git rev-parse "${{ github.event.inputs.tag }}" >/dev/null 2>&1; then
            echo "‚úÖ Tag ${{ github.event.inputs.tag }} exists"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            
            # Check if tag is on main/master branch
            TAG_COMMIT=$(git rev-list -n 1 "${{ github.event.inputs.tag }}")
            MAIN_COMMITS=$(git rev-list origin/main origin/master 2>/dev/null || git rev-list origin/main 2>/dev/null || git rev-list origin/master 2>/dev/null)
            
            if echo "$MAIN_COMMITS" | grep -q "$TAG_COMMIT"; then
              echo "‚úÖ Tag is on main/master branch"
              echo "valid=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Tag is not on main/master branch"
              echo "valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚ùå Tag ${{ github.event.inputs.tag }} does not exist"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.valid == 'true'
    steps:
      - name: Checkout specific tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Create build directory
        run: mkdir -p build
        
      - name: Copy static files
        run: |
          cp index.html build/
          cp -r styles build/
          cp -r js build/
          cp README.md build/
          
          # Copy templates if they exist
          if [ -d "templates" ]; then
            cp -r templates build/
          fi
          
      - name: Optimize CSS (production minification)
        run: |
          echo "üé® Optimizing CSS files..."
          find build/styles -name "*.css" -exec sed -i 's|/\*.*\*/||g' {} \;
          find build/styles -name "*.css" -exec sed -i 's/[[:space:]]\+/ /g' {} \;
          echo "‚úÖ CSS optimization complete"
          
      - name: Optimize JavaScript (production minification)
        run: |
          echo "‚ö° Optimizing JavaScript files..."
          find build/js -name "*.js" -exec sed -i '/console\.log/d' {} \;
          find build/js -name "*.js" -exec sed -i 's|//.*$||g' {} \;
          echo "‚úÖ JavaScript optimization complete"
          
      - name: Add deployment metadata
        run: |
          echo "üìù Adding deployment metadata..."
          echo "<!-- Deployed via GitHub Actions on $(date -u) -->" >> build/index.html
          echo "<!-- Tag: ${{ github.event.inputs.tag }} -->" >> build/index.html
          echo "<!-- Commit: ${{ github.sha }} -->" >> build/index.html
          echo "<!-- Environment: ${{ github.event.inputs.environment }} -->" >> build/index.html
          
      - name: Validate build
        run: |
          echo "üîç Validating build output..."
          
          # Check required files
          required_files=(
            "build/index.html"
            "build/js/app.js"
            "build/js/data.js"
            "build/js/ui.js"
            "build/js/utils.js"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done
          
          # Validate HTML structure
          if ! grep -q "<title>" build/index.html; then
            echo "‚ùå Missing title tag in HTML"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"
          
      - name: Generate production sitemap
        run: |
          echo "üó∫Ô∏è Generating sitemap..."
          cat > build/sitemap.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://zerohpage.github.io/simpleopenfield/</loc>
              <lastmod>$(date -u +%Y-%m-%d)</lastmod>
              <changefreq>monthly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          
      - name: Generate robots.txt
        run: |
          cat > build/robots.txt << EOF
          User-agent: *
          Allow: /
          
          Sitemap: https://zerohpage.github.io/simpleopenfield/sitemap.xml
          EOF
          
      - name: Create PWA manifest
        run: |
          cat > build/manifest.json << EOF
          {
            "name": "SimpleOpenField",
            "short_name": "SOF",
            "description": "Field Service Management Application",
            "start_url": "/simpleopenfield/",
            "display": "standalone",
            "background_color": "#ffffff",
            "theme_color": "#2563eb",
            "icons": [
              {
                "src": "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><circle cx='50' cy='50' r='40' fill='%232563eb'/><text x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'>S</text></svg>",
                "sizes": "192x192",
                "type": "image/svg+xml"
              }
            ]
          }
          EOF
          
      - name: Update HTML with PWA support
        run: |
          sed -i 's|</head>|  <link rel="manifest" href="manifest.json">\n  <meta name="theme-color" content="#2563eb">\n</head>|' build/index.html
          
      - name: Create 404 page
        run: |
          cat > build/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Page Not Found - SimpleOpenField</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                      display: flex;
                      justify-content: center;
                      align-items: center;
                      height: 100vh;
                      margin: 0;
                      background: #f8fafc;
                      color: #334155;
                  }
                  .container {
                      text-align: center;
                      max-width: 400px;
                      padding: 2rem;
                  }
                  h1 { color: #2563eb; font-size: 3rem; margin-bottom: 1rem; }
                  p { margin-bottom: 2rem; line-height: 1.6; }
                  a {
                      display: inline-block;
                      padding: 0.75rem 1.5rem;
                      background: #2563eb;
                      color: white;
                      text-decoration: none;
                      border-radius: 0.5rem;
                      transition: background 0.2s;
                  }
                  a:hover { background: #1d4ed8; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>404</h1>
                  <p>The page you're looking for doesn't exist.</p>
                  <a href="/simpleopenfield/">Return to SimpleOpenField</a>
              </div>
              <script>
                  if (window.location.pathname.startsWith('/simpleopenfield/')) {
                      window.location.href = '/simpleopenfield/';
                  }
              </script>
          </body>
          </html>
          EOF
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./build

  # Deploy job (with environment protection)
  deploy:
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.valid == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Create deployment summary
        run: |
          echo "## üöÄ Protected Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.event.inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Security Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Environment Protection Rules Applied" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Tag Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Branch Protection Verified" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Manual Approval Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ SimpleOpenField ${{ github.event.inputs.tag }} is now live!"

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [validate, build, deploy]
    if: always()
    steps:
      - name: Report deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Protected deployment successful!"
            echo "üåê Live URL: https://zerohpage.github.io/simpleopenfield/"
            echo "üì¶ Tag: ${{ github.event.inputs.tag }}"
            echo "üîí Environment: ${{ github.event.inputs.environment }}"
          elif [ "${{ needs.validate.result }}" == "failure" ]; then
            echo "‚ùå Deployment validation failed!"
            echo "Please check that:"
            echo "  1. Tag ${{ github.event.inputs.tag }} exists"
            echo "  2. Tag is on main/master branch"
            echo "  3. You have permission to deploy"
          else
            echo "‚ùå Deployment failed!"
            echo "Please check the workflow logs for details."
            exit 1
          fi
